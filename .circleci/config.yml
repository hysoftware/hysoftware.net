version: 2
jobs:
  build:
    docker:
      - image: circleci/node:latest-browsers
    working_directory: ~/hysoftware
    steps:
      - checkout
      - restore_cache:
          keys:
            - hysoftware-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: "Download Code Climate tool"
          command: |
            curl -o ../cc-test-reporter \
              -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64
            chmod u+x ../cc-test-reporter
      - run:
          name: "Install Frontend Dependencies"
          command: yarn install
      - save_cache:
          key: hysoftware-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - "./node_modules"
      - run:
          name: "Lint"
          command: yarn run lint
      - run:
          name: "Test"
          command: |
            ../cc-test-reporter before-build;
            yarn run test -- --no-progress;
            ../cc-test-reporter after-build -t lcov --exit-code ${?} ./coverage/lconv.info
      - run:
          name: "E2E Test"
          command: yarn run e2e
      - run:
          name: "Build the script"
          command: yarn run build -- --configuration production --no-progress
      - store_artifacts:
          path: ./dist
          destination: dist
      - persist_to_workspace:
          root: .
          paths:
            - dist/hysoftware
  deploy:
    docker:
      - image: python:latest
    working_directory: ~/hysoftware
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Install AWS CLI"
          command: pip install awscli
      - run:
          name: "Upload"
          command: aws s3 sync ./dist/hysoftware/ s3://hysoftware/ --exact-timestamps --delete
      - run:
          name: "Invalidate CDN (1)"
          command: aws cloudfront create-invalidation --distribution-id ${CF_ID} --paths '/*'
      - run:
          name: "Invalidate CDN (2)"
          command: >
            curl -X POST \
              -H 'Content-Type:application/json' \
              -H "X-Auth-Key:${FLARE_API}" \
              -H "X-Auth-Email:${FLARE_EMAIL}" \
              --data '{"purge_everything":true}' \
              https://api.cloudflare.com/client/v4/zones/${FLARE_ZONE}/purge_cache

release_filter: &release_filter
  tags:
    only: /^(?:[0-9]+\.){2}[0-9].*/
  branches:
    ignore: /.*/

dev_filter: &dev_filter
  tags:
    ignore: /^(?:[0-9]+\.){2}[0-9].*/

workflows:
  version: 2
  default:
    jobs:
      - build:
          filters:
            << : *dev_filter
  version_tag:
    jobs:
      - build:
          filters:
            << : *release_filter
      - deploy:
          requires:
            - build
          filters:
            << : *release_filter
